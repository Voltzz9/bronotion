  // This section specifies the database connection details.
  datasource db {
    provider = "postgresql" // Specify the database provider
    url      = env("DATABASE_URL") // The database connection URL
  }

  // This section specifies the Prisma Client generation options.
  generator client {
    provider = "prisma-client-js" // The client used for querying the database
  }

  model User {
    id              String           @id @default(uuid())
    name            String
    username        String
    password_hash   String?
    email           String
    emailVerified   DateTime?
    image           String?
    
    // Relations
    active_editors  ActiveEditor[]
    auth_methods    UserAuthMethod[] @relation("UserAuthMethods")
    accounts        Account[]        @relation("UserAccounts") // Added relation
    sessions        Session[]        @relation("UserSessions") // Added relation
    notes           Note[]           @relation("UserNotes") // Added relation
    shared_notes    SharedNote[]     @relation("UserSharedNotes") // Added relation
  }

  model UserAuthMethod {
    id        Int    @id @default(autoincrement())
    user_id   String
    isOAuth   Boolean
    isManual  Boolean

    // Relations
    user      User   @relation("UserAuthMethods", fields: [user_id], references: [id], onDelete: Cascade)
  }

  model Account {
    id                Int      @id @default(autoincrement())
    user_id           String
    type              String
    provider          String
    provider_account_id String
    refresh_token     String?
    access_token      String?
    expires_at        BigInt?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    oauth_token_secret String?
    oauth_token       String?

    // Relations
    user              User     @relation("UserAccounts", fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([provider, provider_account_id])
  }

  model Session {
    id           Int      @id @default(autoincrement())
    user_id      String
    expires      DateTime
    sessionToken String   @unique

    // Relations
    user         User     @relation("UserSessions", fields: [user_id], references: [id], onDelete: Cascade)
  }

  model VerificationToken {
    identifier String
    expires    DateTime
    token      String

    @@id([identifier, token])
  }

  model Tag {
    tag_id    Int      @id @default(autoincrement())
    name      String   @unique
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    // Relation
    notes     NoteTag[]
  }

  model Note {
    note_id    Int      @id @default(autoincrement())
    title      String
    content    String?
    user_id    String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    is_deleted Boolean  @default(false)

    // Relations
    user       User     @relation("UserNotes", fields: [user_id], references: [id], onDelete: Cascade)
    tags       NoteTag[]
    shared_notes SharedNote[]
    active_editors ActiveEditor[]
  }

  model NoteTag {
    note_id  Int
    tag_id   Int

    // Relations
    note     Note     @relation(fields: [note_id], references: [note_id], onDelete: Cascade)
    tag      Tag      @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)

    @@id([note_id, tag_id])
  }

  model SharedNote {
    shared_note_id     Int      @id @default(autoincrement())
    note_id            Int
    shared_with_user_id String
    can_edit           Boolean  @default(false)
    shared_at          DateTime @default(now())

    // Relations
    note               Note     @relation(fields: [note_id], references: [note_id], onDelete: Cascade)
    shared_with_user   User     @relation("UserSharedNotes", fields: [shared_with_user_id], references: [id], onDelete: Cascade)
  }

  model ActiveEditor {
    active_editor_id   Int      @id @default(autoincrement())
    note_id            Int
    user_id            String
    last_active        DateTime @default(now())

    // Relations
    note               Note     @relation(fields: [note_id], references: [note_id], onDelete: Cascade)
    user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@unique([note_id, user_id])
  }