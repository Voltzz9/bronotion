datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  username       String?
  email          String    @unique
  password_hash  String
  emailVerified  DateTime?
  image          String?

  // Relations
  accounts       Account[]
  sessions       Session[]
  shared_notes   SharedNote[]
  notes          Note[]
  active_editors ActiveEditor[]
  auth_methods   UserAuthMethod?
}

model UserAuthMethod {
  user_id   Int     @id
  isOAuth   Boolean @default(false)
  isManual  Boolean @default(true)

  // Relations
  user      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token       String?

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  expires    DateTime
  token      String

  @@id([identifier, token])
}

model Tag {
  tag_id    Int      @id @default(autoincrement())
  name      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relation
  notes     NoteTag[]
}

model Note {
  note_id    Int      @id @default(autoincrement())
  title      String
  content    String?
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  // Relations
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tags       NoteTag[]
  shared_notes SharedNote[]
  active_editors ActiveEditor[]
}

model NoteTag {
  note_id  Int
  tag_id   Int

  // Relations
  note     Note     @relation(fields: [note_id], references: [note_id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)

  @@id([note_id, tag_id])
}

model SharedNote {
  shared_note_id     Int      @id @default(autoincrement())
  note_id            Int
  shared_with_user_id Int
  can_edit           Boolean  @default(false)
  shared_at          DateTime @default(now())

  // Relations
  note               Note     @relation(fields: [note_id], references: [note_id], onDelete: Cascade)
  shared_with_user   User     @relation(fields: [shared_with_user_id], references: [id], onDelete: Cascade)
}

model ActiveEditor {
  active_editor_id   Int      @id @default(autoincrement())
  note_id            Int
  user_id            Int
  last_active        DateTime @default(now())

  // Relations
  note               Note     @relation(fields: [note_id], references: [note_id], onDelete: Cascade)
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([note_id, user_id])
}
